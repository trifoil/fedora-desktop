conky.config = {
    -- Window settings
    own_window = true,
    own_window_type = 'normal',
    own_window_transparent = true,  -- We'll handle the background with Lua
    own_window_hints = 'undecorated,below,sticky,skip_taskbar,skip_pager',
    own_window_argb_visual = true,
    own_window_argb_value = 0,  -- Fully transparent to allow Lua drawing

    -- Shadow settings
    draw_shades = false,  -- We handle shadows in Lua if desired
    draw_outline = false,
    draw_borders = false,

    -- Text and graph colors
    default_color = '#FFFFFF',
    color0 = '#FFFFFF',  -- White for main text
    color1 = '#FFB6C1',  -- Light pink for highlights
    color2 = '#FF69B4',  -- Hot pink for graphs
    color3 = '#FF1493',  -- Deep pink for borders

    -- Font settings
    use_xft = true,
    font = 'DejaVu Sans:size=9',
    xftalpha = 0.8,

    -- Update interval
    update_interval = 1.0,
    total_run_times = 0,

    -- Position (top-right corner)
    alignment = 'top_right',
    gap_x = 10,
    gap_y = 10,

    -- Minimum and maximum size
    minimum_width = 250,
    minimum_height = 300,
    maximum_width = 300,

    -- CPU and memory settings
    cpu_avg_samples = 2,
    net_avg_samples = 2,

    -- Text formatting
    use_spacer = 'none',
    text_buffer_size = 256,

    -- Lua hook for drawing rounded corners
    lua_load = '~/.config/conky/rounded.lua',
    lua_draw_hook_pre = 'draw_rounded_bg'
}

-- Lua function to draw rounded rectangle (embedded here)
conky.text = [[
${lua_draw_hook_pre draw_rounded_bg}
${color0}${font DejaVu Sans:bold:size=12}SYSTEM INFO${font}${color}
${hr 2}
${color0}Hostname:${color} $nodename
${color0}Kernel:${color} $kernel
${color0}Uptime:${color} $uptime
${color0}Load Average:${color} $loadavg

${color0}${font DejaVu Sans:bold:size=12}CPU${font}${color}
${hr 1}
${color0}CPU Usage:${color} ${cpu cpu0}%
${color2}${cpubar cpu0 10,100}${color}
${color0}Core 1:${color} ${cpu cpu1}% ${color2}${cpubar cpu1 5,50}${color}
${color0}Core 2:${color} ${cpu cpu2}% ${color2}${cpubar cpu2 5,50}${color}
${color0}Core 3:${color} ${cpu cpu3}% ${color2}${cpubar cpu3 5,50}${color}
${color0}Core 4:${color} ${cpu cpu4}% ${color2}${cpubar cpu4 5,50}${color}

${color0}${font DejaVu Sans:bold:size=12}MEMORY${font}${color}
${hr 1}
${color0}RAM Usage:${color} $mem/$memmax ($memperc%)
${color2}${membar 10,100}${color}
${color0}Swap Usage:${color} $swap/$swapmax ($swapperc%)
${color2}${swapbar 10,100}${color}

${color0}${font DejaVu Sans:bold:size=12}DISK${font}${color}
${hr 1}
${color0}Root:${color} ${fs_used /}/${fs_size /} (${fs_used_perc /}%)
${color2}${fs_bar 10,100 /}${color}

${color0}${font DejaVu Sans:bold:size=12}NETWORK${font}${color}
${hr 1}
${color0}Down:${color} ${downspeed eth0} ${color1}${downspeedgraph eth0 25,100}${color}
${color0}Up:${color} ${upspeed eth0} ${color1}${upspeedgraph eth0 25,100}${color}

${color0}${font DejaVu Sans:bold:size=12}PROCESSES${font}${color}
${hr 1}
${color0}Processes:${color} $processes
${color0}Running:${color} $running_processes
${color0}Threads:${color} $threads

${color0}${font DejaVu Sans:bold:size=12}TOP PROCESSES${font}${color}
${hr 1}
${color0}1.${color} ${top name 1} ${top cpu 1}%
${color0}2.${color} ${top name 2} ${top cpu 2}%
${color0}3.${color} ${top name 3} ${top cpu 3}%
${color0}4.${color} ${top name 4} ${top cpu 4}%
${color0}5.${color} ${top name 5} ${top cpu 5}%
]]

-- Lua code embedded directly for rounded corners
require 'cairo'

function draw_rounded_bg()
    if conky_window == nil then return end

    local cs = cairo_xlib_surface_create(conky_window.display,
        conky_window.drawable,
        conky_window.visual,
        conky_window.width,
        conky_window.height)
    cr = cairo_create(cs)

    -- Rounded rectangle parameters
    local width = conky_window.width
    local height = conky_window.height
    local radius = 15  -- Corner radius
    local shadow_offset = 3

    -- Shadow
    cairo_set_source_rgba(cr, 0, 0, 0, 0.5)  -- black, 50% alpha
    cairo_new_path(cr)
    cairo_move_to(cr, radius+shadow_offset, shadow_offset)
    cairo_line_to(cr, width-radius+shadow_offset, shadow_offset)
    cairo_arc(cr, width-radius+shadow_offset, radius+shadow_offset, radius, -math.pi/2, 0)
    cairo_line_to(cr, width+shadow_offset, height-radius+shadow_offset)
    cairo_arc(cr, width-radius+shadow_offset, height-radius+shadow_offset, radius, 0, math.pi/2)
    cairo_line_to(cr, radius+shadow_offset, height+shadow_offset)
    cairo_arc(cr, radius+shadow_offset, height-radius+shadow_offset, radius, math.pi/2, math.pi)
    cairo_line_to(cr, shadow_offset, radius+shadow_offset)
    cairo_arc(cr, radius+shadow_offset, radius+shadow_offset, radius, math.pi, 3*math.pi/2)
    cairo_close_path(cr)
    cairo_fill(cr)

    -- Background
    cairo_set_source_rgba(cr, 0.545, 0, 0, 0.8)  -- dark red
    cairo_new_path(cr)
    cairo_move_to(cr, radius, 0)
    cairo_line_to(cr, width-radius, 0)
    cairo_arc(cr, width-radius, radius, radius, -math.pi/2, 0)
    cairo_line_to(cr, width, height-radius)
    cairo_arc(cr, width-radius, height-radius, radius, 0, math.pi/2)
    cairo_line_to(cr, radius, height)
    cairo_arc(cr, radius, height-radius, radius, math.pi/2, math.pi)
    cairo_line_to(cr, 0, radius)
    cairo_arc(cr, radius, radius, radius, math.pi, 3*math.pi/2)
    cairo_close_path(cr)
    cairo_fill(cr)

    cairo_destroy(cr)
    cairo_surface_destroy(cs)
end
